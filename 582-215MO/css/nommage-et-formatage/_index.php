<?php
/**
 * @type     article
 * @title    Nommage et formatage
 * @icon     images/icon.png
 * @abstract Ã€ priori, nommer des Ã©lÃ©ments peut sembler facile.
 */
?>

<p class="spacer">Ã€ priori, nommer des Ã©lÃ©ments peut sembler facile. Par exemple, voici trois noms de classes: <incode>.truc</incode>, <incode>.patente</incode> et <incode>.chose</incode>. Pourquoi ces noms?</p>

<p>ThÃ©oriquement, nous pouvons donner n'importe quel nom Ã  nos classes sans affecter le fonctionnement de notre code.</p>

<p>Cependant, imaginez si vous deviez embarquer sur un projet. <em>(Ã‰crit par quelqu'un d'autre ou par vous-mÃªme il y a longtemps.)</em> Vous fait un survole du CSS et vous voyez ces classes <incode>.truc</incode>, <incode>.patente</incode>, <incode>.chose</incode>â€¦</p>

<clipasset src="videos/what-happened.mp4"></clipasset>

<br>

<p>Bonne chance pour comprendre!</p>

<p>Si Ã  l'opposÃ© ces classes Ã©taient nommÃ©es: <incode>.grille</incode>, <incode>.carte</incode> et <incode>.titre</incode> leurs rÃ´les et relation, serait soudainement plus Ã©vident. D'oÃ¹ l'importance de donner des noms reprÃ©sentatifs.</p>

<quote author="Phil Karlton" title="DÃ©veloppeur chez Netscape et solide moustachu" photo="images/phil-karlton.jpg">
  There are only two hard things in Computer Science: cache invalidation and naming things
</quote>


<dots></dots>


<grostitre>CohÃ©rence</grostitre>

<p>Il existe plusieurs faÃ§ons de nommer ses classes.</p>

<p>Par exemple:</p>

<ul>
  <li><incode>.MaClasse { ... }</incode></li>
  <li><incode>.maClasse { ... }</incode></li>
  <li><incode>.ma-classe { ... }</incode></li>
  <li><incode>.ma_classe { ... }</incode></li>
  <li>Etc.</li>
</ul>

<p>Le tout devient rapidement mÃ©langeant si l'on se met Ã  jongler avec ces diffÃ©rentes possibilitÃ©s. Il est donc fortement encouragÃ© de s'en tenir Ã  une seule approche.</p>

<info>Au moment dâ€™Ã©crire ces lignes, le modÃ¨le le plus rÃ©pandu est celui en miniature oÃ¹ les espaces sont remplacÃ©s par des tirets. ex: <incode>.ma-classe { ... }</incode></info>

<dots></dots>


<grostitre>Formatage</grostitre>

<p>Un code bien formatÃ© est un code facile Ã  lire et surtout facile Ã  dÃ©boguer!</p>

<p>Voici quelques rÃ¨gles de base.</p>

<h3>Accolades</h3>

<p>Un espace entre le sÃ©lecteur et l'accolade ouvrante devrait toujours Ãªtre prÃ©sent et elle devrait Ãªtre suivi d'un retour de chariot Enter â†µ afin de simplifier la lisibilitÃ© du code.</p>

<p>Quant Ã  elle, l'accolade fermante devrait Ãªtre seule sur la ligne suivant la derniÃ¨re propriÃ©tÃ© et sont indentation devrait correspondre Ã  celle de son sÃ©lecteur. Une ligne vide devrait ensuite la suivre afin de dÃ©limiter proprement chaque bloc.</p>

<p>ğŸ‘Œ</p>

<highlight lang="css">.carte {
  display: block;
  width: 100%;
}</highlight>

<p>ğŸš«</p>

<highlight lang="css">.carte{display: block;
  width: 100%;}</highlight>

<dots></dots>


<grostitre>Espaces</grostitre>

<p>Lorsque vous Ã©crivez vos propriÃ©tÃ©s, elles devraient normalement Ãªtre indentÃ©es Ã  l'intÃ©rieur de vos accolades</p>

<p>ğŸ‘Œ</p>

<highlight lang="css">sÃ©lecteur {
  propriÃ©tÃ©: valeur;
}</highlight>

<p>ğŸš«</p>

<highlight lang="css">sÃ©lecteur {
propriÃ©tÃ©: valeur;
}</highlight>

<info>Actuellement, deux espaces est lâ€™indentation la plus courante en CSS.</info>

<p>L'important est de garder une indentation cohÃ©rente d'une ligne Ã  l'autre.</p>

<p>ğŸ‘Œ</p>

<highlight lang="css">.carte {
  display: block;
  width: 100%;
  padding: 20px;
}</highlight>

<p>ğŸš«</p>

<highlight lang="css">.carte {
  display: block;
width: 100%;
    padding: 20px;
}</highlight>

<dots></dots>


<grostitre>Formatage automatique</grostitre>

<h3>VS Code</h3>

<p>Lorsqu'un code est sÃ©lectionnÃ©, VS Code permet de le formater automatiquement Ã  l'aide d'un raccourcis clavier:</p>

<ul>
  <li>Windows: <incode>Shift</incode> + <incode>Alt</incode> + <incode>F</incode></li>
  <li>Mac: <incode>Shift</incode> + <incode>Options</incode> + <incode>F</incode></li>
</ul>

<h3>CodePen</h3>

<p>Dans l'entÃªte de chacune des fenÃªtres <em>(HTML, CSS, JavaScript)</em> se trouve un chevron pointant vers le bas âŒ„. Cette icÃ´ne donne accÃ¨s aux diffÃ©rentes options de la fenÃªtre. Parmi elles se trouve <em>"Format"</em> permettant de formater votre code automatiquement.</p>

<dots></dots>

<tool href="tools/css-beautifier/"></tool>

<dots></dots>