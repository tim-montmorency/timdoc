<?php 
/**
 * @type     article
 * @title    REST API
 * @icon     images/icon-wp.png
 * @abstract Acc√©der aux contenus en JavaScript via des JSON
 * @index 10
 */
?>

<p>Le Rest API de WordPress est la fonctionnalit√© pr√©f√©r√©e des d√©veloppeurs WordPress n'affectionnant pas particuli√®rement&nbsp;WordPress‚Äâüñ§.</p>

<p>Elle permet aux √©diteurs de continuer d'entrer/modifier du contenu dans le tableau de bord de WordPress, comme dans tout site WordPress classique. Tout en permettant aux d√©veloppeurs d'acc√©der aux contenus en JavaScript via des JSON plut√¥t que d'avoir √† utiliser les templates PHP de&nbsp;WordPress.</p>


<dots></dots>
<grostitre>Utilisation de base</grostitre>
      
<p>Par d√©faut, le Rest API est d√©j√† pr√©sent sur tout site WordPress. Pour y avoir acc√®s, il suffit d'ajouter&nbsp;<incode>/wp-json/wp/v2/</incode>&nbsp;√† la fin de l'url du site en&nbsp;question.</p>

<p>Par exemple:</p>

<highlight lang="url">https://site.com/wp-json/wp/v2/</highlight>

<br>
<p>La page retourn√©e ressemble probablement √† un mur de texte illisible. Il s'agit en fait d'un fichier JSON minifi√© contenant tous les contenus du site, affich√©s sur une seule&nbsp;ligne.</p>


<alert><strong>Erreur fr√©quente</strong><br>Si le Rest API de votre site ne r√©pond pas √† cette URL, il est probable que votre h√©bergeur ait modifi√© son emplacement. Pour le trouver, ouvrez le code source de votre page d‚Äôaccueil et cherchez&nbsp;<em>"wp-json/"</em>.</alert>
<br><br>


<tool href="../../tools/jsonview/"></tool>




 <dots></dots>
 <grostitre>Routes</grostitre>

<p>Pour des raisons de performance et de facilit√© de traitement, il est g√©n√©ralement pr√©f√©rable de ne charger que les informations qui seront utilis√©es. Pour ce faire, il est possible d'utiliser ce que l'on appelle des&nbsp;routes.</p>

<p>Par exemple, si seulement les pages sont requises, il est possible de sp√©cifier la&nbsp;route</p>

<highlight lang="url">https://site.com/wp-json/wp/v2/pages</highlight>

<br>

<p>Qui retournera un JSON ne contenant que les pages&nbsp;publi√©es.</p>

<p>Dans cet exemple, la partie&nbsp;<incode>https://site.com/wp-json/wp/v2</incode>&nbsp;correspond √† l'URL de base de l'API. Tandis que&nbsp;<incode>/pages</incode>&nbsp;est la route sp√©cifiant que seuls les contenus de type&nbsp;<em>page</em>&nbsp;doivent-√™tre&nbsp;retourn√©.</p>

<p>Si un autre type de publication doit √™tre retourn√©. Par exemple, les articles, ou en anglais&nbsp;<em>posts</em>, il suffit de sp√©cifier une route&nbsp;diff√©rente.</p><p>Par exemple:&nbsp;<incode>/posts</incode>.</p>

<highlight lang="url">https://site.com/wp-json/wp/v2/posts</highlight>


<br>
<p>Il est possible de sp√©cifier des routes encore plus pr√©cises. Notamment en sp√©cifiant l'ID de la publication&nbsp;d√©sir√©e.</p>

<p>Par exemple, si seulement la page avec le ID 10 est requis, il est possible de sp√©cifier la route&nbsp;<incode>/pages/10</incode>.</p>

<highlight lang="url">https://site.com/wp-json/wp/v2/pages/10</highlight>







<dots></dots>
<grostitre>Tri des r√©sultats</grostitre>


<h3 class="heading heading--h3" id="orderby">orderby</h3>

<p>Pour trier les r√©sultats d‚Äôune requ√™te, il faut ajouter des param√®tres √† l‚ÄôURL fournie √† la requ√™te fetch. Un premier <incode>orderby</incode> permet d'indiquer le crit√®re devant √™tre utilis√© afin de trier les r√©sultats. Il est entre autres possible de trier par:</p>

<ul>
    <li><p>Titre <incode>title</incode></p></li>
    <li><p>Identifiant <incode>id</incode></p></li>
    <li><p>Date de publication <incode>date</incode></p></li>
    <li><p>Etc.</p></li>
</ul>
    
<p>Par exemple, par titres:</p>

<highlight lang="url">https://site.com/wp-json/wp/v2/posts?orderby=title</highlight>


<h3 class="heading heading--h3" id="order">order</h3>

<p>Il est aussi de sp√©cifier l‚Äôordre dans lequel les posts devraient √™tre tri√©s via le param√®tre <incode>order </incode>permettant de sp√©cifier si les r√©sultats doivent √™tre tri√©s par:</p>
<ul>
    <li><p>ordre croissant asc </p></li>
    <li><p>ordre d√©croissant desc</p></li>
</ul>


<p>Par exemple, par titres d√©croissants:</p>


<highlight lang="url">https://site.com/wp-json/wp/v2/posts?orderby=title&order=desc</highlight>


<br>
<doclink href='https://developer.wordpress.org/rest-api/reference/posts/#arguments'>Arguments</doclink>


<info>Le premier param√®tre est s√©par√© de l‚ÄôURL gr√¢ce √† un point d‚Äôinterrogation <em>(?)</em>. Tous les param√®tres suivants sont s√©par√©s entre eux par une perlu√®te&nbsp;<em>(&amp;)</em>.</info>






<dots></dots>
<grostitre>Featured Image</grostitre>

<p>Par d√©faut, un objet correspondant √† un post dans le JSON ne contient que le id du featured image lui √©tant associ√©. Pour obtenir plus d‚Äôinformations concernant ce featured image, il faut le sp√©cifier dans l‚ÄôURL fournie √† fetch en lui ajoutant le param√®tre <incode>_embed</incode>. </p>


<p>Par exemple: </p>

<highlight lang="url">https://site.com/wp-json/wp/v2/posts?_embed </highlight>


<br><br>

<p>Chaque post sera alors bonifi√© d‚Äôune propri√©t√© nomm√©e <incode>_embedded</incode> contenant une sous-propri√©t√© intitul√©e <incode>wp:featuredmedia</incode>. Celle-ci est un tableau contenant des objets correspondant √† chaque featured image associ√©e au post. </p>


<info>Certaines extensions permettent d‚Äôajouter plus d‚Äôune featured image, d‚Äôo√π pourquoi un tableau est&nbsp;retourn√©.</info>

<p>Il est donc possible d‚Äôacc√©der √† toutes les propri√©t√©s associ√©es √† cette image telles que: sa date de cr√©ation, son alt et surtout son URL. </p>

<p>Par exemple, afin d‚Äôobtenir l‚ÄôURL de la 1<sup>re</sup> featured image:</p>

<highlight lang="javascript">referencAuPost._embedded['wp:featuredmedia'][0].source_url</highlight>

<br><br>
<doclink href='https://developer.wordpress.org/rest-api/using-the-rest-api/global-parameters/#_embed'>_embed</doclink>









<dots></dots>
<grostitre>Compatibilit√© ACF</grostitre>

<p>Par d√©faut, les informations stock√©es dans des champs&nbsp;<a target="_blank" rel="noopener noreferrer" href="/cours/wordpress/advanced-custom-fields">ACF</a>&nbsp;ne sont pas retourn√©es par le Rest&nbsp;API de WordPress. Heureusement, il est possible de les inclure facilement en ajoutant l'extension&nbsp;<em>ACF to REST&nbsp;API</em>&nbsp;de Aires&nbsp;Gon√ßalves.</p>

<img src="images/acf-to-rest-api.jpg" alt="">

<p>Aussi t√¥t l'extension install√©e, les champs ACF seront visibles dans le JSON retourn√© dans une propri√©t√© nomm√©e&nbsp;<em>ACF</em>.</p>








<dots></dots>
<grostitre>Affichage</grostitre>
<p>Une fois les JSONs d√©sir√©s identifi√©s, il ne reste plus qu'√† afficher leurs&nbsp;informations!</p>
<p>Par exemple, dans la page&nbsp;<em>single.php</em>&nbsp;servant √† afficher les articles, il serait possible de d√©clarer une balise&nbsp;<incode>&lt;script&gt;</incode>&nbsp;et d'effectuer un&nbsp;<a target="_blank" rel="noopener noreferrer" href="/cours/javascript/fetch">fetch</a>&nbsp;afin de r√©cup√©rer les informations de l'article&nbsp;courant:</p>



<highlight lang="javascript">
fetch(&quot;/wp-json/wp/v2/posts/&lt;?php the_ID(); ?&gt;&quot;)
  .then(response =&gt; response.json())
  .then(data =&gt; console.log(data));
</highlight>

<info><incode>the_ID()</incode> est une fonction de WordPress retournant le id de la page courante, ex:&nbsp;10.</info>

<br><br>
<exercice href="../../exercices/wp-rest-api-vice-versa/"></exercice>



<br> <br>
<doclink href='https://developer.wordpress.org/rest-api/using-the-rest-api/global-parameters/'>REST API</doclink>
