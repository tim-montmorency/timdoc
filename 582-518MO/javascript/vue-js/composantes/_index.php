<?php 
/**
 * @type     article
 * @title    Composantes
 * @icon     ../images/icon.webp
 * @abstract Composantes autonomes pouvant √™tre r√©utilisables
 * @index    75
 * @ref      web/cadriciels/vuejs
 */
?>

<p>Les composantes sont une partie importante de Vue. Elles permettent de cr√©er des sites complexes ou, m√™me des applications web √† l‚Äôaide de composantes autonomes pouvant √™tre r√©utilisables.</p>


<p>Les composantes nous permettent de fractionner l'interface (UI) en morceaux ind√©pendants et r√©utilisables, sur lesquels nous pouvons r√©fl√©chir de mani√®re isol√©e. Il est courant pour une application d'√™tre organis√©e en un arbre de composantes imbriqu√©es.</p>

<img src="./images/composante-pageweb.png" alt="Arbre de composants">

<dots></dots>

<grostitre>D√©finir une composante</grostitre>


<p>Pour d√©finir une composante, il suffit d‚Äôappeler la m√©thode <incode>component</incode> d‚Äôune application Vue et de lui passer deux param√®tres: </p>


<ol start="1">
    <li>Le <em>nom</em> √† lui attribuer.</li>
    <li>Un <em>objet {}</em> contenant des propri√©t√©s.</li>
</ol>



<info>Les composantes acceptent les m√™mes propri√©t√©s de base qu‚Äôune app Vue: <incode>data</incode>, <incode>methods</incode>, <incode>computed</incode>, <incode>template</incode>,&nbsp;etc.</info>



<br>
Par exemple, pour d√©finir une composante de compteur:
<highlight lang="javascript">// Creation d'un app Vue
const app = Vue.createApp({})

// D√©finition d'une composante
app.component('counter', {
  data() {
    return {
      nbr: 0
    }
  },
  template: `
    &lt;button @click=&quot;nbr++&quot;&gt;
      Cliqu√© { { nbr } }x
    &lt;/button&gt;`
})</highlight>
<small style="color: #999; font-size: 70%;">Ne pas mettre un espace entre les deux accolades ouvrantes ni entre les deux accolades fermantes.</small>



<info>Remarquez la propri√©t√© template contenant une chaine de caract√®res correspondant au code HTML associ√© √† la&nbsp;composante.</info>




<dots></dots>
<grostitre>Utilisation d'une composante</grostitre>

<p>Lorsqu'une composante est d√©finie, il est possible d'y faire r√©f√©rence dans le HTML d'une app √† partir de son nom sous forme d'une balise.</p>

Par exemple:

<highlight lang="html">&lt;counter&gt;</highlight>


<codepen id="mdvKMNm" tab="html,result" height="400"></codepen>

<br>
<doclink href="https://fr.vuejs.org/guide/essentials/component-basics">Composante - Les bases</doclink>



<dots></dots>
<grostitre>R√©utilisation d'une composante</grostitre>
<p>Une composante peut-√™tre r√©utilis√©e aussi souvent que d√©sir√©.</p>

<codepen id="QWYxqYX" tab="html,result" height="300"></codepen>

<p>Chaque bouton est enti√®rement ind√©pendant. Ainsi le compteur de l'un n'a aucune influence sur le compteur d'un autre.</p>

<doclink href="https://fr.vuejs.org/guide/essentials/component-basics#using-a-component">Utilisation / r√©utilisation d'une composante</doclink>




<dots></dots>
<grostitre>Props</grostitre>

<p>Si nous construisons un blog, il est probable que nous ayons besoin d'un composant pour repr√©senter un article du blog. Nous voulons que tous les articles partagent la m√™me mise en page, mais avec un contenu diff√©rent. Un tel composant ne sera utile que si vous pouvez lui passer des donn√©es, comme le titre et le contenu d'un article sp√©cifique que l'on voudrait afficher. C'est l√† que les <incode>props</incode> entrent en jeu.</p>


<p>Les <incode>props</incode> sont des donn√©es pass√©es √† une composante. Pour en d√©finir, il faut sp√©cifier le nom des <incode>props</incode> attendus dans un tableau.</p>

<p>Par exemple, si seulement la props <incode>msg</incode> est attendue: </p>

<highlight lang="javascript">app.component('counter', {
  props: ['msg'],
  ...
})</highlight>


<br><br>
<p>Pour passer une donn√©e, il suffit ensuite d'ajouter un attribut avec la valeur d√©sir√©e:</p>

<highlight lang="html">&lt;counter msg=&quot;A&quot;&gt;
&lt;counter msg=&quot;B&quot;&gt;</highlight>

<codepen id="RwvJLOJ" tab="html,result" height="400"></codepen>

<p>Lorsqu'une <incode>props</incode> est pass√©e √† une composante, elle devient l'√©quivalent d'une donn√©e dans <incode>data</incode>.</p>

<alert>Les <incode>props</incode> sont des donn√©es pass√©es aux composantes mais ne peuvent pas changer de valeur.</alert>

<warning>Pour nommer vos <incode>props</incode>, si vous utilisez du <em>camelCase</em> (m√©lange de minuscules et majuscules), vous devrez utiliser le <em>kebab-case</em> du c√¥t√© HTML dans les noms d'attributs de votre composante. Mais au stade o√π on en est, pour le moment, je vous conseille simplement de n'utiliser que des minuscules dans les noms de vos <incode>props</incode>. √áa va vous simplifier la vie.</warning>

<doclink href="https://fr.vuejs.org/guide/components/props">Props</doclink>




<dots></dots>
<grostitre>Boucle v-for</grostitre>
<p>Les composantes sont souvent utilis√©es conjointement avec de boucles afin de tirer profit de leur r√©usabilit√©.</p>

<p>Par exemple: </p>
<highlight lang="html">&lt;counter v-for=&quot;btn in btnsArr&quot; :msg=&quot;btn.msg&quot;&gt;&lt;/counter&gt;</highlight>

<codepen id="OJdExYr" tab="html,result" height="400"></codepen>

<p>Voici un autre exemple avec une composante de 2 props: <em>pletter</em> et <em>pcolor</em>.</p>

<codepen id="JjxwowM" tab="html,result" height="400"></codepen>


<!--
<aside class="exercice-card">
    <div class="exercice-card__content">
      <em class="exercice-card__tagline">Exercice</em><br class="exercice-card__break">
      <a href="../../../exercices/vue-sushis/ " target="_blank" class="exercice-card__title">
        Vue&nbsp;Sushis
      </a>

            <p class="exercice-card__description">Pour cet exercice, vous devez compl√©ter un menu d‚Äôun restaurant de sushis üç£ permettant de visualiser le d√©tail d‚Äôune commande en temps&nbsp;r√©...</p>
          </div>

     
</aside>
-->

<exercice href="../../../exercices/vue-composante-cartes/"></exercice>

