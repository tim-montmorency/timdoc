<?php 
/**
 * @type     article
 * @title    Promesses JavaScript
 * @icon     images/ico-promesse-js.png
 * @abstract Repr√©sentant compl√©tion ou √©chec d'une op√©ration asyncrone
 * @index 99
 */
?>
<grostitre>La m√©taphore d'une promesse</grostitre>
<p>Une promesse (en anglais promise), consiste en un <strong><em>engagement</em></strong> √† faire quelque chose. Par exemple, un camarade de classe peut vous promettre de remettre sa partie d‚Äôun travail d'√©quipe d‚Äôici la fin de la&nbsp;semaine.</p>

<p>Le r√©sultat d‚Äôune telle promesse n‚Äôest pas imm√©diatement disponible. Il faut se montrer patient et <em>attendre que la promesse soit compl√©t√©e</em>. Par exemple, attendre que votre camarade remette sa partie, soit: jeudi, vendredi, samedi ou encore&nbsp;dimanche.</p>

<p><em>Une promesse est faite dans le but d‚Äô√™tre respect√©e</em>. Donc si votre camarade promet de remettre sa partie pour une date X, c‚Äôest qu‚Äôil est confiant de pouvoir respecter son engagement et lorsque ce sera chose faite, vous pourrez alors jumeler vos&nbsp;parties de travail d'√©quipe.</p>

<p>Dans de <em>rares occasions, une promesse peut √™tre bris√©e</em>. Un contretemps pourrait par exemple emp√™cher votre camarade de remettre sa partie. Vous, vous tournerez alors vers un plan&nbsp;B.</p>



<dots></dots>
<grostitre>Promesse JavaScript</grostitre>

<p>Les&nbsp;<code>Promises</code>&nbsp;en JavaScript fonctionnent sur le m√™me principe. √Ä d√©faut de pouvoir r√©pondre imm√©diatement une fonction peut retourner une promesse. Cette approche est particuli√®rement utile lorsque la fonction en question contacte un serveur externe, puisque son d√©lai de r√©ponse peut&nbsp;varier.</p><p>Si la promesse est respect√©e, la m√©thode&nbsp;<code>.then()</code>&nbsp;est ensuite appel√©e et la valeur de la r√©ponse lui est pass√©e en&nbsp;param√®tre.</p>


<p>Si la promesse est bris√©e et qu‚Äôune m√©thode&nbsp;<code>.catch()</code>&nbsp;est pr√©sente, elle est appel√©e et un message d‚Äôerreur lui est&nbsp;envoy√©.</p>

<dots></dots>
<grostitre>Mise-en-contexte pour le cours</grostitre>

<p>Bien qu‚Äôil soit possible de : <br><br>
- <em>faire ou construire une promesse</em> en JavaScript (<span style="color:#000; font-weight: 900; background-color: #5FF6F6;">create</span>)<br>
- <em>recevoir une promesse</em> en JavaScript (<span style="color:#000; font-weight: 900; background-color: #F97DF8">consume</span>), <br><br>
il est plus fr√©quent d‚Äôen&nbsp;recevoir (consume).</p>
<br>
<p>D'abord, on apprendra comment faire, comment CONSTRUIRE UNE PROMESSE en JavaScript. </p>

<p>Par la suite, on apprendra plut√¥t √† RECEVOIR CETTE PROMESSE. Donc, comprendre la fa√ßon dont une promesse est construite vous aidera √† g√©rer la r√©ception d'une telle promesse.</p>

<p>Dans l'exemple de l'image ci-dessous, on simule l'appel chez Uber pour demander un service. Uber fera donc la promesse d'une course en voiture (ride). Apr√®s un cerytain temps, on recevra une notification soit: <br>"‚úÖ votre condcuteur est arriv√© (driver arrived) ‚úÖ"<br>ou :<br>"üö´ votre conducteur a annul√© votre requ√™te (driver bailed) üö´".</p>
<img src="images/create-consume-promise-js.png" alt="2 fene^tre de code une √† cot√© de l'autre: √†a gauche: la cr√©ation d'une promesse et √† droite: la r√©ception de cette promesse.">



<dots></dots>
<grostitre>FAIRE (CONSTRUIRE) UNE PROMESSE</grostitre>
<grostitre>- new Promise</grostitre>
<p>Le code new Promise() permet de cr√©er une promesse. Cette promesse est en fait un <em>objet&nbsp;JavaScript</em> contenant une fonction acceptant deux&nbsp;param√®tres.</p>


<ol start="1">
    <li>Le <em>1er param√®tre</em> correspond au nom d'une fonction √† appeler lorsque la promesse est&nbsp;<em>respect√©e</em>.</li>

    <li>Le <em>2e param√®tre</em> correspond au nom de la fonction √† appeler lorsqu'elle est&nbsp;<em>bris√©e</em>.</li>
 </ol>
 <br>
 <br>

<p>Par exemple, la promesse suivante‚Äâüëá appelle la fonction&nbsp;<code>resolve</code>&nbsp;lorsqu'elle est respect√©e et&nbsp;<code>reject</code>&nbsp;lorsqu'elle est bris√©e. <br>
La valeur du retour dans les deux cas est pass√©e en&nbsp;param√®tre.</p>


<pre><code class="hljs javascript"><span class="hljs-keyword">const</span> promesse = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> {
  <span class="hljs-keyword">const</span> respectPromesse = <span class="hljs-literal">true</span>;

  <span class="hljs-keyword">if</span> (respectPromesse === <span class="hljs-literal">true</span>) {
    resolve(<span class="hljs-string">"Promesse respect√©e"</span>);
  } <span class="hljs-keyword">else</span> {
    reject(<span class="hljs-string">"Promesse bris√©e"</span>);
  }
});</code></pre>


<p>Dans le cadre de cette d√©monstration, la promesse sera toujours&nbsp;respect√©e.</p><p>Cependant, un exemple plus concret serait le cas d'un service tentant de r√©pondre √† une demande d'informations. Si les informations sont trouv√©es, la fonction assign√©e au respect de la promesse est appel√©e. Si le d√©lai imparti avant de trouver la r√©ponse est d√©pass√©, la fonction assign√©e au bris de promesse est&nbsp;appel√©e.</p>

<doclink href='https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Global_Objects/Promise'>Promise</doclink>
<doclink href='https://www.w3schools.com/js/js_promise.asp'>Promise</doclink>

<dots></dots>


<p>Pour obtenir le r√©sultat d'une promesse, il est&nbsp;<strong>impossible d'appeler directement la promesse</strong>. </p>


Par exemple, le code&nbsp;suivant:

<pre><code class="hljs javascript"><span class="hljs-built_in">console</span>.log(promesse); <span class="hljs-comment">// [objet Promise] {}</span></code></pre>

<p>retournerait un message indiquant qu'il s'agit d'un objet de type&nbsp;<code>Promise</code>&nbsp;et non la valeur contenu dans la&nbsp;promesse.</p>









<dots></dots>

<grostitre>RECEVOIR UNE PROMESSE</grostitre>

<grostitre>- then() ‚úÖ</grostitre>
        

<p>Si la promesse est respect√©e, une m√©thode&nbsp;<code>.then()</code>&nbsp;est appel√©e et la valeur lui est pass√©e en&nbsp;param√®tre.</p>

Par exemple:
<pre><code class="hljs javascript">promesse
  .then(<span class="hljs-function"><span class="hljs-params">valeur</span> =&gt;</span> <span class="hljs-built_in">console</span>.log(valeur));
<span class="hljs-comment">// "Promesse respect√©e"</span></code></pre>


<br><br>

<p>Une m√©thode&nbsp;<code>.then()</code>&nbsp;retourne elle aussi une promesse. Cette promesse peut donc √† son tour avoir un&nbsp;<code>.then()</code>&nbsp;et ainsi enchainer de multiple&nbsp;<code>.then()</code>&nbsp;un √† la suite de&nbsp;l'autre.</p>

Par exemple:
<pre><code class="hljs javascript">promesse
  .then(<span class="hljs-function"><span class="hljs-params">value</span> =&gt;</span> <span class="hljs-string">`<span class="hljs-subst">${value}</span>, oh oui!!!`</span>)
  .then(<span class="hljs-function"><span class="hljs-params">msg</span> =&gt;</span> <span class="hljs-built_in">console</span>.log(msg)); <span class="hljs-comment">// "Promesse respect√©e, oh oui!!!"</span></code></pre>

<br>
<doclink href='https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Global_Objects/Promise/then'>then()</doclink>


<dots></dots>
<grostitre>- catch() üö´</grostitre>

<p>Si la promesse est bris√©e et qu'une m√©thode&nbsp;<code>.catch()</code>&nbsp;est pr√©sente, cette derni√®re est appel√©e et la valeur lui est pass√©e en&nbsp;param√®tre.</p>

Par exemple:
<pre><code class="hljs javascript">promesse
  .catch(<span class="hljs-function"><span class="hljs-params">error</span> =&gt;</span> <span class="hljs-built_in">console</span>.log(error)); <span class="hljs-comment">// "Promesse bris√©e"</span></code></pre>

<br>
  <doclink href='https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Global_Objects/Promise/catch'>catch()</doclink>




  <dots></dots>
<grostitre>- finally()</grostitre>
<p>Si une m√©thode&nbsp;<code>.finally()</code>&nbsp;est pr√©sente, celle-ci est appel√©e d√®s que la promesse est compl√©t√©e, peu importe son statut qu'elle soit respect√©e ou&nbsp;bris√©e.</p>



Par exemple:
<pre><code class="hljs javascript">promesse
  .finally(<span class="hljs-function">() =&gt;</span> <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"Promesse compl√©t√©e"</span>));</code></pre>

<dots></dots>
<doclink href='https://developer.mozilla.org/fr/docs/Web/JavaScript/Reference/Global_Objects/Promise/finally'>finally()</doclink>


<br><br><br>

Dans un exemple concret, tout mis ensemble donnerait&nbsp;ceci:

<pre><code class="hljs javascript">promesse
  .then(<span class="hljs-function"><span class="hljs-params">value</span> =&gt;</span> <span class="hljs-built_in">console</span>.log(value))
  .catch(<span class="hljs-function"><span class="hljs-params">error</span> =&gt;</span> <span class="hljs-built_in">console</span>.log(error))
  .finally(<span class="hljs-function">() =&gt;</span> <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"Promesse compl√©t√©e"</span>));

<span class="hljs-comment">// "Promesse respect√©e", "Promesse compl√©t√©e"</span></code></pre>
<br><br>




<dots></dots>

<grostitre>R√©sum√© vid√©o</grostitre>
  <a href="https://www.youtube.com/watch?v=RvYYCGs45L4" class="youtube__wrapper" data-module="Youtube">
  
    <div class="youtube__player" id="youtube-player-8dc8c580-6bb2-11ee-a2b9-ed597c799f44">
        <iframe id="youtube-8dc8c580-6bb2-11ee-a2b9-ed597c799f44" frameborder="0" allowfullscreen="1" allow="accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share" title="JavaScript Promise in 100 Seconds" width="640" height="360" src="https://www.youtube.com/embed/RvYYCGs45L4?enablejsapi=1&amp;modestbranding=1&amp;rel=0&amp;showinfo=0&amp;origin=https%3A%2F%2Fsmnarnold.com&amp;widgetid=1" tabindex="-1"></iframe>
    </div>

  </a>

  
