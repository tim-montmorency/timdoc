<?php
/**
 * @type     article
 * @title    Pseudo-classes interm√©diaires
 * @icon     images/icon.webp
 * @abstract first-child, last-child, only-child, nth
 * @ref      web/css
 */
?>

<grostitre>:first-child & :last-child</grostitre>

<p>Comme leurs noms l'indiquent, <incode>:first-child</incode> et <incode>:last-child</incode> permettent de s√©lectionner le premier et dernier √©l√©ment dans un groupe s'ils correspondent au s√©lecteur pass√© avant le <incode>:</incode>.</p>

<p>Par exemple, la r√®gle suivante:</p>

<highlight lang="css">.element:first-child { ... }</highlight>

<p>Valide √† l'int√©rieur de chaque groupe d'√©l√©ments si le premier enfant √† la classe <incode>.element</incode>. Si tel est le cas, l'√©l√©ment est s√©lectionn√©.</p>

<p>Ci-dessous √† gauche <incode>:first-child</incode> est utilis√© afin de rendre bleu‚Äâüü¶ le premier enfant du groupe, tandis qu'√† droite <incode>:last-child</incode> fait la m√™me chose, mais pour le dernier.</p>

<codepen id="rNrKgGe" tab="result" height="340"></codepen>

<doclink href="https://developer.mozilla.org/fr/docs/Web/CSS/:first-child">:first-child</doclink>
<doclink href="https://www.w3schools.com/cssref/sel_firstchild.asp">:first-child</doclink>
<doclink href="https://developer.mozilla.org/fr/docs/Web/CSS/:last-child">:last-child</doclink>
<doclink href="https://www.w3schools.com/cssref/sel_last-child.asp">:last-child</doclink>

<dots></dots>


<grostitre>:only-child</grostitre>

<p>S√©lectionne un √©l√©ment lorsqu'il est enfant unique de son √©l√©ment parent. Bref, lorsque l'√©l√©ment est √† la fois le <incode>:first-child</incode> et le <incode>:last-child</incode> de son groupe.</p>

<p>Par exemple, la r√®gle suivante:</p>

<highlight lang="css">.element:only-child { ... }</highlight>

<p>Valide √† l'int√©rieur de chaque groupe d'√©l√©ments si un seul enfant est pr√©sent et si celui-ci poss√®de la classe <incode>.element</incode>. Si tel est le cas, l'√©l√©ment est s√©lectionn√©.</p>

<p>Dans l'exemple ci-dessous, tous les carr√©s ont la classe <incode>.element</incode>. Cependant, √† gauche, plusieurs enfants sont pr√©sents, donc aucun d'entre eux n'est s√©lectionn√©. Tandis qu'√† droite, un seul enfant est pr√©sent, donc <incode>:only-child</incode> le s√©lectionne et le rend bleu‚Äâüü¶.</p>

<codepen id="NWBzVXm" tab="result" height="340"></codepen>

<p>Ce type de pseudo-classe peut √™tre pratique par exemple pour retirer la puce ‚Ä¢ d'un √©l√©ment de liste s'il est le seul √©l√©ment pr√©sent dans sa liste.</p>

<doclink href="https://developer.mozilla.org/fr/docs/Web/CSS/:only-child">:only-child</doclink>
<doclink href="https://www.w3schools.com/cssref/sel_only-child.asp">:only-child</doclink>

<dots></dots>


<grostitre>:nth-child()</grostitre>

<p>La pseudo-classe <incode>nth-child</incode> permet de s√©lectionner un ou plusieurs √©l√©ments selon leur index dans un groupe. Afin de sp√©cifier quels √©l√©ments devraient √™tre s√©lectionn√©s, il faut sp√©cifier une formule entre parenth√®ses.</p>

<clipasset src="videos/ralph-wiggum-selectionne.mp4"></clipasset>

<h3>:nth-child & index</h3>

<p>L'option la plus simple est de s√©lectionner un √©l√©ment √† partir de son index tout simplement. Pour ce faire, il suffit de sp√©cifier directement l'index d√©sir√© entre parenth√®ses.</p>

<p>Par exemple, la r√®gle suivante:</p>

<highlight lang="css">.element:nth-child(2) { ... }</highlight>

<p>S√©lectionne le deuxi√®me √©l√©ment si celui-ci √† la classe <incode>.element</incode>.</p>

<codepen id="MWBXdGa" tab="css,result" height="340"></codepen>

<warning>En JavaScript les index commencent √† 0, mais en CSS √† 1.</warning>

<h3>:nth-child() pair & impair</h3>

<p>Nth-child permet gr√¢ce aux mots-cl√©s <incode>even</incode> et <incode>odd</incode> de s√©lectionner tous les √©l√©ments pairs ou impairs qui correspondent au s√©lecteur avant le <incode>:</incode>.</p>

<p>Par exemple, √† gauche tous les √©l√©ments pairs sont s√©lectionn√©s gr√¢ce √† <incode>nth-child(even)</incode>. Tandis qu'√† droite tous ceux impairs sont s√©lectionn√©s via <incode>nth-child(odd)</incode>.</p>

<codepen id="ExpRzRW" tab="css,result" height="340"></codepen>

<h3>:nth-child() & occurrences</h3>

<p>En ajoutant √† un index le suffixe <incode>n</incode>, il est possible d'indiquer que toutes les N occurrences devraient √™tre s√©lectionn√©es.</p>

<p>Par exemple, la r√®gle suivante:</p>

<highlight lang="css">.element:nth-child(3n) { ... }</highlight>

<p>Sp√©cifie un interval de 3. Si les √©l√©ments √† ces index ont la classe <incode>.element</incode>, ceux-ci sont alors s√©lectionn√©s.</p>

<p>Dans l'exemple suivant, puisque tous les √©l√©ments ont la classe <incode>.element</incode>, ceux aux index 3, 6 et 9 sont donc s√©lectionn√©s.</p>

<codepen id="vYarwar" tab="css,result" height="340"></codepen>

<warning>Sans le <incode>n</incode>, seulement le 3e √©l√©ment serait s√©lectionn√©.</warning>

<h3>:nth-child() & d√©calage</h3>

<p>S√©lectionner par <em>N occurrences</em> est pratique et puissant, mais il est parfois n√©cessaire de s√©lectionner √† partir d'un index de d√©part diff√©rent, d'o√π les options de d√©calage.</p>

<p>Par exemple, la r√®gle suivante:</p>

<highlight lang="css">.element:nth-child(3n-2) { ... }</highlight>

<p>Sp√©cifie un interval de 3, comme dans l'exemple pr√©c√©dent, mais indique de d√©caler chaque s√©lection de 2 en amount‚Äâ‚¨Ö.</p>

<codepen id="OJwEYBq" tab="css,result" height="340"></codepen>

<p>L'inverse aurait aussi √©t√© possible en utilisant <incode>:nth-child(3n+2)</incode> pour s√©lectionner en aval‚Äâ‚û° plut√¥t qu'en amont.</p>

<doclink href="https://developer.mozilla.org/fr/docs/Web/CSS/:nth-child">:nth-child()</doclink>
<doclink href="https://www.w3schools.com/cssref/sel_nth-child.asp">:nth-child()</doclink>

<br><br>

<tool href="tools/nth-child-tester/"></tool>
<exercice href="exercices/grille/"></exercice>

<dots></dots>


<grostitre>:nth-last-child()</grostitre>

<p>Cette pseudo-classe fonctionne sur le m√™me principe que <a href="#nth-child">nth-child</a> √† la diff√©rence que <strong>les s√©lections se font √† partir de la fin</strong> et non du d√©but.</p>

<p>Par exemple, la r√®gle suivante:</p>

<highlight lang="css">.element:nth-last-child(2) { ... }</highlight>

<p>S√©lectionne l'avant-dernier √©l√©ment si celui-ci √† la classe <incode>.element</incode>.</p>

<codepen id="MWBXdNj" tab="css,result" height="340"></codepen>

<p>Les mots-cl√©s <incode>even</incode> et <incode>odd</incode>, les occurences <incode>n</incode> et les d√©calages <incode>-/+</incode> sont tous aussi disponibles avec cette pseudo-classe.</p>

<doclink href="https://developer.mozilla.org/fr/docs/Web/CSS/:nth-last-child">:nth-last-child()</doclink>
<doclink href="https://www.w3schools.com/cssref/sel_nth-last-child.asp">:nth-last-child()</doclink>

<dots></dots>

<exercice href="exercices/css-diner/"></exercice>

<dots></dots>


<grostitre>R√©sum√© vid√©o</grostitre>

<clip src="videos/css-pseudo-classes-in-100-seconds.mp4"></clip>

<dots></dots>








